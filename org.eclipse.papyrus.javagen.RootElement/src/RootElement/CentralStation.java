// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement;

import java.awt.Color;
import java.util.ArrayList;

import javax.vecmath.Color3f;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;
import simbad.sim.EnvironmentDescription;

/************************************************************/
/**
 * 
 */
public class CentralStation extends Robot {
	
	//create one instance of this class SINGLETON
	private static CentralStation cs = new CentralStation(new Vector3d(20,0,20), "CentralStation");
	ArrayList<Point3d> posArray; 
	Mapper mapBots[];
	Rescuer resBots[];
	
	//private constructor
//		TODO do we need more stuff in the constructor? 
	private CentralStation(Vector3d position, String name){
		 super(position, name);
		 posArray = new ArrayList<Point3d>();
		 mapBots = new Mapper[2];
		 resBots = new Rescuer[2];
	};
	
	//return the lonely instance SINGLETON
	public static CentralStation getInstance(){
		return cs;
	}	

	public void setCoordinates(ArrayList<Point3d> positions) {
		for(int i=0; i<positions.size();i++){
			posArray.add(positions.get(i));
		}
	}

	public void sendMapper(EnvironmentDescription env, int howmany) {
		
		for(int i=0; i<howmany; i++){
			
			mapBots[i] = new Mapper(new Vector3d(-9,0,(9-i)), "mapper", new Color3f(Color.blue));
			env.add(mapBots[i]);
			
		}
	}
	
	public void sendRescuer(EnvironmentDescription environment, int howmany) {
		
		for(int i=0; i<howmany; i++){
			
			resBots[i] = new Rescuer(new Vector3d(-9,0,(-9+i)), "rescuer", new Color3f(Color.yellow));
			environment.add(resBots[i]);
		}
	}
	
	public void initBehavior(){
		this.detach();
		System.out.println("I exist and my name is "+this.name);
		mapBots[0].myTurn = true;
		mapBots[1].myTurn = true;
	}
	
	public void performBehavior(){
		//mapBots[0].myTurn = true;
		//mapBots[1].myTurn = true;
			boolean[] done = new boolean[2];
			boolean[] broken = new boolean[2];
			
			done[0] = mapBots[0].missionComplete();
			done[1] = mapBots[1].missionComplete();
			broken[0] = (mapBots[0].isWorking())?false:true;
			broken[1] = (mapBots[1].isWorking())?false:true;
			
			for(int i=0; i<2; i++){
				if((done[i] || broken[i])){
					if(mapBots[i].itExists()){
						mapBots[i].detach();
					}
				}
			}
			if(done[0] && done[1]){
				if(!resBots[0].itExists()){
					resBots[0].attach();				
				}
				if(!resBots[1].itExists()){
					resBots[1].attach();				
				}
				resBots[0].myTurn = true;
				resBots[1].myTurn = true;
			}
		}
//		if (!(mapBots[0].myTurn) && !(mapBots[1].myTurn)){
//
//		}
	
	
	@Override
	public boolean missionComplete(){
		return false;
	}
};
